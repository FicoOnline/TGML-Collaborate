<?xml version="1.0"?>
<Component Clip="False" ContentHeight="20.0" ContentWidth="300.0"
    Height="20.0" Id="TextGroup" Left="390.0" Name="Generic Text"
    Top="380.0" Visibility="Visible" Width="300.0">
    <Expose ExposedAttribute="Id" Name="TextLinkName"/>
    <Expose ExposedAttribute="Name" Name="TextLinkName"/>
    <Expose ExposedAttribute="ContentHeight" Name="LinkHeight"/>
    <Expose ExposedAttribute="Height" Name="LinkHeight"/>
    <Expose ExposedAttribute="ContentWidth" Name="LinkWidth"/>
    <Expose ExposedAttribute="Width" Name="LinkWidth"/>
    <TextBox FontFamily="Arial" FontSize="14.0" FontStyle="Normal"
        FontWeight="Normal" Height="20.0" HorizontalAlign="Left"
        Left="0.0" Name="Text" Opacity="1.0" Stroke="#006699"
        TextDecoration="None" Top="0.0" VerticalAlign="Middle"
            Width="300.0"><![CDATA[TextLink]]><Bind Attribute="Content"
            Name="LinkName" PreventDefault="True"/>
        <Expose ExposedAttribute="Stroke" Name="HoverColor"/>
        <Expose ExposedAttribute="Stroke" Name="SelectedColor"/>
        <Expose ExposedAttribute="Content" Name="InitialText"/>
        <Expose ExposedAttribute="Height" Name="LinkHeight"/>
        <Expose ExposedAttribute="Width" Name="LinkWidth"/>
        <Expose ExposedAttribute="FontSize" Name="LinkFontSize"/>
    </TextBox>
    <Script Name="VisualEffects" OnDocumentLoad=""
        OnMouseClick="onMouseClick" OnMouseMove=""
        OnMouseOut="onMouseOut" OnMouseOver="onMouseOver"><![CDATA[function onMouseClick(evt)
{
	var component = evt.getCurrentTarget();
	var tgml = component.getOwnerDocument().getDocumentElement();
	activateButton(tgml, component);
}

function activateButton(tgml, component)
{
	var buttonName = getButtonName(component);
	if (buttonName != null && buttonName != "")
	{
		setActiveButton(tgml, component, buttonName);
	}
}

function getButtonName(component)
{
	return component.getAttribute("Name");
}

function setActiveButton(tgml, component, buttonName)
{
	var buttonList = tgml.getElementsByTagName("Component");
	for (var i = 0; i < buttonList.getLength(); ++i)
	{
		var button = buttonList.item(i);
		if (!getButtonName(button).equals(buttonName)) continue;
		
		var isThis = button == component;
		setSelected(button, isThis);
	}
}

function setSelected(item, select)
{
	item.getChild("Text").setAttribute("TextDecoration",select?"Underline":"None");
	item.getChild("Text").setAttribute("FontWeight",select?"Bold":"Normal");
}

function onMouseOut(evt)
{
	var t = evt.getCurrentTarget();

	t.getChild("Text").setAttribute("TextDecoration","None");
}

function onMouseOver(evt)
{
	var t = evt.getCurrentTarget();
		
	t.getChild("Text").setAttribute("TextDecoration","Underline");
}]]></Script>
    <Rectangle Fill="#FFFFFF" Height="20.0" Left="0.0" Name="HitArea"
        Opacity="0.01" RadiusX="0.0" RadiusY="0.0" Stroke="None"
        StrokeDashArray="0.0" StrokeWidth="2.0" Top="0.0" Width="300.0">
        <Expose ExposedAttribute="Height" Name="LinkHeight"/>
        <Expose ExposedAttribute="Width" Name="LinkWidth"/>
    </Rectangle>
    <Metadata Name="Name" Value="Generic Text"/>
    <Metadata Name="Description" Value="Generic Text without any Link or Script that add function.&#xd;&#xa;&#xd;&#xa;You can add several of these text in a TGML graphic. Select them and rename them to the same name. This will form a &quot;group&quot; of texst due to having the same name. The texts will then toggle visually as you click them.&#xd;&#xa;&#xd;&#xa;The &quot;OpenIn&quot; snippets from the 'SBO TGML Snippets Library 2013' can be dropped onto the button, e.g. OpenInParent, OpenInFloatingWindow etc.&#xd;&#xa;&#xd;&#xa;NOTE! To resize the text please use the following properties on the TextGroup component:&#xd;&#xa;LinkHeight&#xd;&#xa;LinkWidth"/>
</Component>
