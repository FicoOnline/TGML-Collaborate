<?xml version="1.0"?>
<Component Clip="False" ContentHeight="70.0" ContentWidth="70.0"
    GridSize="10" Height="70.0" Left="340.0"
    Name="SBO_Circle_Thermometer" Top="130.0" Width="70.0">
    <Ellipse Fill="#FFFFFF" Height="70.0" Left="0.0" Opacity="1.0"
        Stroke="#808080" StrokeDashArray="0.0" StrokeWidth="3.0"
        Top="0.0" Width="70.0">
        <Expose ExposedAttribute="Stroke" Name="GaugeStrokeColor"/>
        <Expose ExposedAttribute="Fill" Name="GaugeFillColor"/>
    </Ellipse>
    <Arc Center="35.0,35.0" Opacity="1.0" RadiusX="26.0" RadiusY="26.0"
        StartAngle="150.0" Stroke="#E0E0E0" StrokeDashArray="0.0"
        StrokeWidth="8.0" SweepAngle="240.0">
        <Expose ExposedAttribute="Stroke" Name="GaugeArcColor"/>
    </Arc>
    <Arc Center="35.0,35.0" Opacity="1.0" RadiusX="26.0" RadiusY="26.0"
        StartAngle="270.0" Stroke="#A2C73B" StrokeDashArray="0.0"
        StrokeWidth="4.0" SweepAngle="120.0">
        <Bind Attribute="Stroke" Name="Value">
            <ConvertValue AttributeValue="#006699" SignalLessThan="0" SignalMoreThan="">
                <Expose ExposedAttribute="AttributeValue" Name="GaugeValueColorMinus"/>
            </ConvertValue>
            <ConvertValue AttributeValue="#A2C73B"
                SignalMoreOrEqualTo="0" SignalMoreThan="">
                <Expose ExposedAttribute="AttributeValue" Name="GaugeValueColorPlus"/>
            </ConvertValue>
            <Expose ExposedAttribute="Name" Name="BindName"/>
        </Bind>
        <Bind Attribute="SweepAngle" Name="Value">
            <ConvertValue AttributeValue="0" SignalLessThan="0"/>
            <ConvertRange AttributeMaxValue="120" AttributeMinValue="0"
                Name="" SignalMaxValue="100" SignalMinValue="0">
                <Expose ExposedAttribute="SignalMaxValue" Name="Max"/>
            </ConvertRange>
            <ConvertValue AttributeValue="120" SignalLessThan="" SignalMoreThan="100">
                <Expose ExposedAttribute="SignalMoreThan" Name="Max"/>
            </ConvertValue>
            <ConvertValue AttributeValue="-120" SignalLessThan="-100"
                SignalMoreOrEqualTo="" SignalMoreThan="">
                <Expose ExposedAttribute="SignalLessThan" Name="Min"/>
            </ConvertValue>
            <ConvertRange AttributeMaxValue="0" AttributeMinValue="-120"
                SignalMaxValue="0" SignalMinValue="-100">
                <Expose ExposedAttribute="SignalMinValue" Name="Min"/>
            </ConvertRange>
            <Expose ExposedAttribute="Name" Name="BindName"/>
        </Bind>
    </Arc>
    <Text Fill="None" FontFamily="Arial" FontSize="8"
        FontWeight="Normal" HorizontalAlign="Center" Left="35.0"
        Name="ValueText" Stroke="#404040"
            Top="30.307899435794354"><![CDATA[value]]><Bind
            Attribute="FontStyle" Format="Presentation" Name="Value" PreventDefault="True">
            <Expose ExposedAttribute="Name" Name="BindName"/>
            <ConvertStatus Error="Normal" Forced="Italic" Stored="Normal">
                <Expose ExposedAttribute="Error" Name="ErrorFontStyle"/>
                <Expose ExposedAttribute="Stored" Name="StoredFontStyle"/>
                <Expose ExposedAttribute="Forced" Name="ForcedFontStyle"/>
            </ConvertStatus>
        </Bind>
        <Expose ExposedAttribute="Stroke" Name="GaugeTextValueColor"/>
        <Bind Attribute="Content" Format="Presentation" Name="Value" PreventDefault="True"/>
        <Script Decimals="2" Name="NumericPresentationScript"
            OnSignalChange="onSignalChange" Prefix=""
            PreventDefault="True"
                Suffix=""><![CDATA[/**
 * Using singleton pattern for decimals to avoid onDocumentLoad
 * initialization and evaluating on every change.
 *
 * Script global variable _decimals
 */
var _nbr_decimals = null;
function getNumberOfDecimals(evt) {
	if (_nbr_decimals == null) {
		// read the number of decimals from the script element attribute
		var nbr_decimals = parseInt(getScriptAttribute(evt, "Decimals", ""));
		// default to 2 decimals if the value was not a number
		_nbr_decimals = !isNaN(nbr_decimals) ? nbr_decimals : 2;
	}
	return _nbr_decimals;
}
var _prefix = null;
function getPrefix(evt) {
	if (_prefix == null) {
		var prefix = getScriptAttribute(evt, "Prefix", null);
		_prefix = prefix != null ? (prefix + " ") : "";
	}
	return _prefix;
}
var _suffix = null;
function getSuffix(evt) {
	if (_suffix == null) {
		var suffix = getScriptAttribute(evt, "Suffix", null);
		_suffix = suffix != null ? (" " + suffix) : "";
	}
	return _suffix;
}
var _unit = null;
function getUnit(evt) {
	if (_unit == null) {
		var show_unit = getScriptAttribute(evt, "PreventDefault", "False") == "True";
		_unit = show_unit ? (" " + evt.getUnit()) : "";
	}
	return _unit;
}

function getScriptAttribute(evt, attribute, default_value) {
	var scriptElement = evt.getCurrentTarget().getChild("NumericPresentationScript");
	var value = scriptElement.getAttribute(attribute);
	return (value != null || value !== "") ? value : default_value;
}

function onSignalChange(evt) {
	// get the number of decimals
	var nbr_decimals = getNumberOfDecimals(evt);
	
	// round the raw number and extract the decimals
	var value = new Number(evt.getValue());
	if (isNaN(value)) return;
	var decimals = value.toFixed(nbr_decimals).toString().match(/[^\.]+$/)
	
	// replace the decimal part of the formated value
	var new_value = new String(evt.getPresentationValue()).replace(/[\d]+$/, decimals);
	
	var prefix = getPrefix(evt);
	var suffix = getSuffix(evt);
	var unit = getUnit(evt);
	
	// set the contents of the parent Text- or TextBox-element
	evt.getCurrentTarget().setAttribute("Content", prefix + new_value + unit + suffix);
}]]><Expose
                Description="The number of decimals to display"
                ExposedAttribute="Decimals" Name="Decimals"/>
            <Expose ExposedAttribute="Prefix" Name="Prefix"/>
            <Expose ExposedAttribute="Suffix" Name="Suffix"/>
            <Expose ExposedAttribute="PreventDefault" Name="Show Unit"/>
        </Script>
    </Text>
    <Metadata Name="Name" Value="SBO_Circle_Thermometer"/>
    <Metadata Name="Description" Value="SBO Circle Thermometer&#xd;&#xa;&#xd;&#xa;Used for showing a temperature from -100 to 100&#xd;&#xa;&#xd;&#xa;== Exposed Properties ==&#xd;&#xa;GaugeStrokeColor: Stroke color of circle. Default: #808080&#xd;&#xa;GaugeFillColor: Fill color of circle. Default: #FFFFFF&#xd;&#xa;GaugeArcColor: 360 degree arc. Default: #E0E0E0&#xd;&#xa;GaugeValueColorMinus: Color of the value arc. Default: #006699&#xd;&#xa;GaugeValueColorPlus: Color of the value arc. Default: #A2C73B&#xd;&#xa;Min: Minimum value. Default: -100&#xd;&#xa;Max: Maximum value. Default: 100&#xd;&#xa;BindName: The name of the binding.&#xd;&#xa;GaugeTextValueColor: Color of the text for the value&#xd;&#xa;Decimals: Number of decimals. Default: 2&#xd;&#xa;ErrorFontStyle: Style (Normal or Italic) to indicate Error state. Default: Normal&#xd;&#xa;StoredFontStyle: Style (Normal or Italic) to indicate Error state Default: Normal&#xd;&#xa;ForcedFontStyle: (Normal or Italic) to indicate Error state.Default: Italic&#xd;&#xa;TextColor: The color of the text&#xd;&#xa;Prefix: Text that can preceed the value.&#xd;&#xa;Suffix: Text that can follow the value.&#xd;&#xa;Show Unit: Shows or hides the unit. True or False. Default: True"/>
</Component>
