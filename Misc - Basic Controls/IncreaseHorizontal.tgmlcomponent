<?xml version="1.0"?>
<Component Clip="False" ContentHeight="15.0" ContentWidth="15.0"
    Fill="#BFCEFF" Height="15.0" Left="0.0" Max="100"
    Name="IncreaseHorizontal" Push="#3F000000" Step="10"
    Stroke="#000000" Top="0.0" Width="15.0">
    <Bind Name="Value" PreventDefault="True">
        <Expose Description="The name of the Bind element."
            ExposedAttribute="Name" Name="BindName"/>
    </Bind>
    <Script OnMouseClick="" OnMouseDown="down" OnMouseOut="out"
        OnMouseOver="over" OnMouseUp="up" OnSignalChange="signal"><![CDATA[var waitState = 0;
var initiated = false;
var currentValue = NaN;

function signal(evt)
{
  var component = evt.getCurrentTarget();

  currentValue = new Number(evt.getValue());
  waitState = 0;
  initiated = true;
  
  //Reset appearance
  component.getChild("Hover").setAttribute("Visibility", "Hidden");
  component.getChild("Edge").setAttribute("Fill", "None");
}

function over(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    component.getChild("Hover").setAttribute("Visibility", "Visible");
  }
}
        	
function out(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    component.getChild("Hover").setAttribute("Visibility", "Hidden");
    component.getChild("Edge").setAttribute("Fill", "None");
  }
}

function down(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    var color = component.getAttribute("Push");
    component.getChild("Edge").setAttribute("Fill", color);
  }
}

function up(evt)
{
  if(evt.getButton() != 0 || !initiated) return;

  var component = evt.getCurrentTarget();
  
  var increase = new Number(component.getAttribute("Step"));
  var max = new Number(component.getAttribute("Max"));

  var value = max;
  if(currentValue + increase <= max)
    value  = currentValue + increase;

  if(isNaN(increase) || isNaN(max) || currentValue.valueOf() >= value.valueOf())
  {
    // Indicate up
    component.getChild("Edge").setAttribute("Fill", "None");
  }
  else
  {
    // Get bind name
    var nodeList = component.getChildNodes();
    var length = nodeList.getLength();
    var fullName = "";
    for(i=0; i<length; ++i)
    {
      var node = nodeList.item(i);
      if(node.getTagName() == "Bind")
      {
        fullName = node.getFullBindName();
        break;
      }
    }

    // Set value
    waitState = 1;

    if(setValue(fullName, value.valueOf()) == false)
    {
      waitState = 0;
      // Reset appearance
      component.getChild("Hover").setAttribute("Visibility", "Hidden");
      component.getChild("Edge").setAttribute("Fill", "None");
      // Error indication
      var errorBlink = component.getChild("Status").getChild("ErrorBlink");
      errorBlink.setAttribute("Animation", "Stop");
      errorBlink.setAttribute("Animation", "Start");
    }
  }
}]]></Script>
    <Expose ExposedAttribute="Max" Name="Max"/>
    <Expose Description="How much to decrease the value."
        ExposedAttribute="Step" Name="Step"/>
    <Expose Description="The color of the button."
        ExposedAttribute="Fill" Name="ButtonColor"/>
    <Expose ExposedAttribute="Stroke" Name="ButtonEdge"/>
    <Rectangle Height="13.0" Left="1.0" Name="Background" Opacity="1.0"
        RadiusX="1.0" RadiusY="1.0" Stroke="#FFFFFF"
        StrokeDashArray="0.0" StrokeWidth="3.0" Top="1.0"
        Visibility="Visible" Width="13.0"/>
    <Rectangle Fill="None" Height="9.0" Left="3.0" Name="Light"
        Opacity="1.0" RadiusX="0.0" RadiusY="0.0" Stroke="None"
        StrokeDashArray="0.0" StrokeWidth="1.0" Top="3.0"
        Visibility="Visible" Width="9.0">
        <LinearGradient Attribute="Fill" EndPoint="0.0,1.0">
            <GradientStop Color="#99FFFFFF" Offset="0"/>
            <GradientStop Color="None" Offset="1"/>
        </LinearGradient>
    </Rectangle>
    <Path Fill="#000000" Name="Arrow"
        PathData="M5.5,3.5 L5.5,11.5 9.5,7.5 z" Stroke="None"
        StrokeDashArray="0.0" StrokeWidth="0.5" Visibility="Visible">
        <Scale Name="Down" ScaleX="1.0"/>
        <Expose Description="The color of the button arrow."
            ExposedAttribute="Fill" Name="ArrowColor"/>
    </Path>
    <Rectangle Fill="None" Height="15.0" Left="0.0" Name="Hover"
        Opacity="1.0" RadiusX="2.0" RadiusY="2.0" Stroke="None"
        StrokeDashArray="0.0" StrokeWidth="1.0" Top="0.0"
        Visibility="Hidden" Width="15.0">
        <LinearGradient EndPoint="0.0,1.0">
            <GradientStop Color="None" Offset="0.0"/>
            <GradientStop Color="#FFFFFF" Offset="1.0">
                <Expose Description="The color of the hover indication."
                    ExposedAttribute="Color" Name="HoverColor"/>
            </GradientStop>
        </LinearGradient>
    </Rectangle>
    <Rectangle Fill="None" Height="13.0" Left="1.0" Name="Edge"
        Opacity="1.0" RadiusX="1.0" RadiusY="1.0" StrokeDashArray="0.0"
        StrokeWidth="1.0" Top="1.0" Visibility="Visible" Width="13.0"/>
    <Rectangle Fill="None" Height="14.0" Left="0.5" Name="Status"
        Opacity="1.0" RadiusX="1.0" RadiusY="1.0" Stroke="None"
        StrokeDashArray="0.0" StrokeWidth="2.0" Top="0.5"
        Visibility="Visible" Width="14.0">
        <Animate Animation="Stop" Attribute="Stroke" Duration="1"
            From="#FF0000" Name="ErrorBlink" Repeat="3" To="#000000"/>
        <Bind Attribute="Stroke" Name="Value" PreventDefault="True">
            <Expose Description="The name of the Bind element."
                ExposedAttribute="Name" Name="BindName"/>
            <ConvertStatus Error="#C00000" Forced="#1E90FF" Stored="#FFBF00"/>
        </Bind>
    </Rectangle>
    <TargetArea Height="15.0" Left="0.0" Top="0.0" Width="15.0"/>
    <Metadata Name="Name" Value="IncreaseHorizontal"/>
    <Metadata Name="Description" Value="Increases a value.&#xd;&#xa;&#xd;&#xa;Combine an Increase and a Decrease button and bind them to the same variable to create a spin button. Tips: Give the buttons the same Name.&#xd;&#xa;&#xd;&#xa;== Bindings ==&#xd;&#xa;Value: A numeric variable.&#xd;&#xa;&#xd;&#xa;== Exposed Properties ==&#xd;&#xa;BindName: The name of the Bind element.&#xd;&#xa;Max: Maximum value.&#xd;&#xa;Step: How much the value is increased.&#xd;&#xa;ButtonColor: The color of the button.&#xd;&#xa;ButtonEdge: The color of the button edge.&#xd;&#xa;ArrowColor: The color of the button arrow.&#xd;&#xa;HoverColor: Mouse-over indication."/>
</Component>
