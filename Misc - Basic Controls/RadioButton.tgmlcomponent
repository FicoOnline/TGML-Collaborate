<?xml version="1.0"?>
<Component Clip="False" ContentHeight="15.0" ContentWidth="15.0"
    Fill="#BFCEFF" Height="15.0" Left="0.0" Name="RadioButton"
    Push="#3F000000" RadioButtonValue="1" Stroke="#404040" Top="0.0" Width="15.0">
    <Script OnMouseClick="" OnMouseDown="down" OnMouseOut="out"
        OnMouseOver="over" OnMouseUp="up" OnSignalChange="signal"><![CDATA[var waitState = 0;
var initiated = false;
var currentValue = NaN;

function signal(evt)
{
  var component = evt.getCurrentTarget();

  if(!initiated)
    component.getChild("EditMode").setAttribute("Visibility", "Hidden");
  
  currentValue = new Number(evt.getValue());
  waitState = 0;
  initiated = true;
  
  //Reset appearance
  component.getChild("Hover").setAttribute("Visibility", "Hidden");
  component.getChild("Edge").setAttribute("Fill", "None");
}

function over(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    component.getChild("Hover").setAttribute("Visibility", "Visible");
  }
}
        	
function out(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    component.getChild("Hover").setAttribute("Visibility", "Hidden");
    component.getChild("Edge").setAttribute("Fill", "None");
  }
}

function down(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    var color = component.getAttribute("Push");
    component.getChild("Edge").setAttribute("Fill", color);
  }
}

function up(evt)
{
  if(evt.getButton() != 0 || !initiated) return;

  var component = evt.getCurrentTarget();
  
  var radioButtonValue = new Number(component.getAttribute("RadioButtonValue"));
  if(currentValue.valueOf() == radioButtonValue.valueOf() || isNaN(radioButtonValue))
  {
    // Indicate up
    component.getChild("Edge").setAttribute("Fill", "None");
  }
  else
  {
    // Get bind name
    var nodeList = component.getChild("Check").getChildNodes();
    var length = nodeList.getLength();
    var fullName = "";
    for(i=0; i<length; ++i)
    {
      var node = nodeList.item(i);
      if(node.getTagName() == "Bind")
      {
        fullName = node.getFullBindName();
        break;
      }
    }

    // Set value
    waitState = 1;
    if(setValue(fullName, radioButtonValue.valueOf()) == false)
    {
      waitState = 0;
      // Reset appearance
      component.getChild("Hover").setAttribute("Visibility", "Hidden");
      component.getChild("Edge").setAttribute("Fill", "None");
      // Error indication
      var errorBlink = component.getChild("Status").getChild("ErrorBlink");
      errorBlink.setAttribute("Animation", "Stop");
      errorBlink.setAttribute("Animation", "Start");
    }
  }
}]]></Script>
    <Expose Description="The color of the radio button."
        ExposedAttribute="Fill" Name="ButtonColor"/>
    <Expose ExposedAttribute="Stroke" Name="ButtonEdge"/>
    <Ellipse Height="12.0" Left="1.5" Name="Background" Opacity="1.0"
        Stroke="#FFFFFF" StrokeDashArray="0.0" StrokeWidth="4.0"
        Top="1.5" Visibility="Visible" Width="12.0"/>
    <Ellipse Fill="None" Height="7.0" Left="4.0" Name="EditMode"
        Opacity="1.0" Stroke="None" StrokeDashArray="0.0"
        StrokeWidth="1.0" Top="4.0" Visibility="Visible" Width="7.0">
        <LinearGradient Attribute="Stroke" EndPoint="0.0,1.0">
            <GradientStop Color="#B2000000" Offset="0"/>
            <GradientStop Color="#19000000" Offset="1"/>
        </LinearGradient>
    </Ellipse>
    <Ellipse Fill="#001F85" Height="8.0" Left="3.5" Name="Check"
        Opacity="1.0" Stroke="None" StrokeDashArray="0.0"
        StrokeWidth="1.0" Top="3.5" Visibility="Hidden" Width="8.0">
        <Expose Description="The color of the knob."
            ExposedAttribute="Fill" Name="KnobColor"/>
        <Bind Attribute="Visibility" Name="Value" PreventDefault="True">
            <Expose Description="The name of the Bind element."
                ExposedAttribute="Name" Name="BindName"/>
            <ConvertValue AttributeValue="Visible" SignalEqualTo="1">
                <Expose Description="The value to set and indicate."
                    ExposedAttribute="SignalEqualTo" Name="RadioButtonValue"/>
            </ConvertValue>
            <ConvertValue AttributeValue="Hidden" SignalEqualTo=""
                SignalLessThan="1" SignalMoreThan="">
                <Expose Description="The value to set and indicate."
                    ExposedAttribute="SignalLessThan" Name="RadioButtonValue"/>
            </ConvertValue>
            <ConvertValue AttributeValue="Hidden" SignalEqualTo=""
                SignalLessThan="" SignalMoreThan="1">
                <Expose Description="The value to set and indicate."
                    ExposedAttribute="SignalMoreThan" Name="RadioButtonValue"/>
            </ConvertValue>
        </Bind>
    </Ellipse>
    <Expose Description="The value to set and indicate."
        ExposedAttribute="RadioButtonValue" Name="RadioButtonValue"/>
    <Ellipse Fill="None" Height="15.0" Left="0.0" Name="Hover"
        Opacity="1.0" Stroke="None" StrokeDashArray="0.0"
        StrokeWidth="1.0" Top="0.0" Visibility="Hidden" Width="15.0">
        <LinearGradient EndPoint="0.0,1.0">
            <GradientStop Color="None" Offset="0.0"/>
            <GradientStop Color="#FFFFFF" Offset="1.0">
                <Expose Description="The color of the hover indication."
                    ExposedAttribute="Color" Name="HoverColor"/>
            </GradientStop>
        </LinearGradient>
    </Ellipse>
    <Ellipse Fill="None" Height="13.0" Left="1.0" Name="Edge" Top="1.0" Width="13.0"/>
    <Ellipse Fill="None" Height="14.0" Left="0.5" Name="Status"
        Opacity="1.0" Stroke="None" StrokeDashArray="0.0"
        StrokeWidth="2.0" Top="0.5" Visibility="Visible" Width="14.0">
        <Animate Animation="Stop" Attribute="Stroke" Duration="1"
            From="#FF0000" Name="ErrorBlink" Repeat="3" To="#000000"/>
        <Bind Attribute="Stroke" Name="Value" PreventDefault="True">
            <Expose Description="The name of the Bind element."
                ExposedAttribute="Name" Name="BindName"/>
            <ConvertStatus Error="#C00000" Forced="#1E90FF" Stored="#FFBF00"/>
        </Bind>
    </Ellipse>
    <TargetArea Height="15.0" Left="0.0" Top="0.0" Width="15.0"/>
    <Metadata Name="Name" Value="RadioButton"/>
    <Metadata Name="Description" Value="Sets an integer value.&#xd;&#xa;&#xd;&#xa;Use two or more radio buttons, each with a unique RadioButtonValue, connected to the same variable to create a radio button group (Tips: Give the radio buttons the same Name).&#xd;&#xa;&#xd;&#xa;== Binding ==&#xd;&#xa;Value: An integer variable.&#xd;&#xa;&#xd;&#xa;== Exposed Properties ==&#xd;&#xa;ButtonColor: The radio button color.&#xd;&#xa;ButtonEdge: The color of the button edge.&#xd;&#xa;KnobColor: The color of the knob.&#xd;&#xa;BindName: The name of the Bind element.&#xd;&#xa;RadioButtonValue: The value to set (and indicate).&#xd;&#xa;HoverColor: Mouse-over indication."/>
</Component>
