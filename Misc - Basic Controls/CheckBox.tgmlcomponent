<?xml version="1.0"?>
<Component Clip="False" ContentHeight="15.0" ContentWidth="15.0"
    Fill="#BFCEFF" Height="15.0" Left="0.0" Name="CheckBox"
    Push="#3F000000" Stroke="#000000" Top="0.0" Width="15.0">
    <Script OnMouseClick="" OnMouseDown="down" OnMouseOut="out"
        OnMouseOver="over" OnMouseUp="up" OnSignalChange="signal"><![CDATA[var waitState = 0;
var initiated = false;
var currentValue = NaN;

function signal(evt)
{
  var component = evt.getCurrentTarget();
  
  if(!initiated)
    component.getChild("EditMode").setAttribute("Visibility", "Hidden");
  
  currentValue = new Number(evt.getValue());
  waitState = 0;
  initiated = true;
  
  //Reset appearance
  component.getChild("Hover").setAttribute("Visibility", "Hidden");
  component.getChild("Edge").setAttribute("Fill", "None");
}

function over(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    component.getChild("Hover").setAttribute("Visibility", "Visible");
  }
}
        	
function out(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    component.getChild("Hover").setAttribute("Visibility", "Hidden");
    component.getChild("Edge").setAttribute("Fill", "None");
  }
}

function down(evt)
{
  if(waitState == 0 && initiated)
  {
    var component = evt.getCurrentTarget();
    var color = component.getAttribute("Push");
    component.getChild("Edge").setAttribute("Fill", color);
  }
}
        	

function up(evt)
{
  if(evt.getButton() != 0 || !initiated) return;

  var component = evt.getCurrentTarget();
    
  // Get bind name
  var nodeList = component.getChild("Check").getChildNodes();
  var length = nodeList.getLength();
  var fullName = "";
  for(i=0; i<length; ++i)
  {
    var node = nodeList.item(i);
    if(node.getTagName() == "Bind")
    {
      fullName = node.getFullBindName();
      break;
    }
  }

  // Set value
  waitState = 1;
  var value = (currentValue.valueOf()==1) ? false : true;
  if(setValue(fullName, value) == false)
  {
    waitState = 0;
    // Reset appearance
    component.getChild("Hover").setAttribute("Visibility", "Hidden");
    component.getChild("Edge").setAttribute("Fill", "None");
    // Error indication
    var errorBlink = component.getChild("Status").getChild("ErrorBlink");
    errorBlink.setAttribute("Animation", "Stop");
    errorBlink.setAttribute("Animation", "Start");
  }
}]]></Script>
    <Expose Description="The color of the check box."
        ExposedAttribute="Fill" Name="ButtonColor"/>
    <Expose ExposedAttribute="Stroke" Name="ButtonEdge"/>
    <Rectangle Height="12.0" Left="1.5" Name="Background" Opacity="1.0"
        RadiusX="0.0" RadiusY="0.0" Stroke="#FFFFFF"
        StrokeDashArray="0.0" StrokeWidth="4.0" Top="1.5" Width="12.0"/>
    <Path Fill="#A0A0A0" Name="EditMode"
        PathData="M6.0,7.5 L4.0,7.5 6.5,11.5 7.5,11.5 11.5,4.5 11.5,3.5 10.0,3.5 7.0,9.5 z"
        Stroke="None" StrokeWidth="0.5" Visibility="Visible"/>
    <Path Fill="#001F85" Name="Check"
        PathData="M6.0,7.5 L4.0,7.5 6.5,11.5 7.5,11.5 11.5,4.5 11.5,3.5 10.0,3.5 7.0,9.5 z"
        Stroke="None" Visibility="Hidden">
        <Expose Description="The color of the check mark."
            ExposedAttribute="Fill" Name="CheckColor"/>
        <Bind Attribute="Visibility" Name="Value" PreventDefault="True">
            <Expose Description="The name of the Bind element."
                ExposedAttribute="Name" Name="BindName"/>
            <ConvertValue AttributeValue="Visible" SignalEqualTo="1"/>
            <ConvertValue AttributeValue="Hidden" SignalEqualTo="0"/>
        </Bind>
    </Path>
    <Rectangle Fill="None" Height="15.0" Left="0.0" Name="Hover"
        Opacity="1.0" RadiusX="0.0" RadiusY="0.0" Stroke="None"
        StrokeDashArray="0.0" StrokeWidth="1.0" Top="0.0"
        Visibility="Hidden" Width="15.0">
        <LinearGradient EndPoint="0.0,1.0">
            <GradientStop Color="None" Offset="0.0"/>
            <GradientStop Color="#FFFFFF" Offset="1.0">
                <Expose Description="The color of the hover indication."
                    ExposedAttribute="Color" Name="HoverColor"/>
            </GradientStop>
        </LinearGradient>
    </Rectangle>
    <Rectangle Fill="None" Height="13.0" Left="1.0" Name="Edge"
        Top="1.0" Width="13.0"/>
    <Rectangle Fill="None" Height="14.0" Left="0.5" Name="Status"
        Opacity="1.0" RadiusX="0.0" RadiusY="0.0" Stroke="None"
        StrokeDashArray="0.0" StrokeWidth="2.0" Top="0.5"
        Visibility="Visible" Width="14.0">
        <Animate Animation="Stop" Attribute="Stroke" Duration="1"
            From="#FF0000" Name="ErrorBlink" Repeat="3" To="#000000"/>
        <Bind Attribute="Stroke" Name="Value" PreventDefault="True">
            <Expose Description="The name of the Bind element."
                ExposedAttribute="Name" Name="BindName"/>
            <ConvertStatus Error="#C00000" Forced="#1E90FF" Stored="#FFBF00"/>
        </Bind>
    </Rectangle>
    <TargetArea Height="15.0" Left="0.0" Top="0.0" Width="15.0"/>
    <Metadata Name="Name" Value="CheckBox"/>
    <Metadata Name="Description" Value="Toggles a binary value.&#xd;&#xa;&#xd;&#xa;== Binding ==&#xd;&#xa;Value: A binary variable.&#xd;&#xa;&#xd;&#xa;== Exposed Properties ==&#xd;&#xa;ButtonColor: The check box color.&#xd;&#xa;ButtonEdge: The color of the check box edge.&#xd;&#xa;CheckColor: Check mark color.&#xd;&#xa;BindName: The name of the Bind element.&#xd;&#xa;HoverColor: Mouse-over indication."/>
</Component>
