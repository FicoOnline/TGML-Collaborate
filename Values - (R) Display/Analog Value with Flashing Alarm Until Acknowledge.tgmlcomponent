<?xml version="1.0"?>
<Component Color="#F0080E" ContentHeight="20" ContentWidth="100"
    Decimals="1"
    Description="Analog Value 100 with Flashing Alarm Till Ack"
    Fill="#FFD100" GridSize="5" Height="20.0" Left="372.0"
    Name="Analog Value with Flashing Alarm Until Acknowledge"
    Top="149.0" Units="Â°F" Width="100.0">
    <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[

var comp;	
var value;
var dec;
var units;
var alarmStatus;
var alarmAcknowledgementStatus;
var forcedStatus;											// Variables that are declared globally so they can be used in all the functions.
var correctAlarmBinding;
var offColor;
var onColor;
var forcedColor;
var alarmColor;
var alarmBind;
var valueBind;


function onLoad(evt)
{
	alarmStatus = false;
	alarmAcknowledgementStatus = false;
	forcedStatus = false;
	correctAlarmBinding = true;
	comp=evt.getCurrentTarget();
	offColor=comp.getChildByName("background").getAttribute("Stroke");					// Short cuts that are made to improve readability and to cut down on typing. 
	onColor=evt.getCurrentTarget().getAttribute("Color");								// These short cuts are going to be used in the rest of the component. 
	forcedColor=comp.getAttribute("Fill");	
	alarmColor=comp.getAttribute("Color");
	dec = comp.getAttribute("Decimals");
	units = comp.getAttribute("Units");
	
	var bindGroup = comp.getChildByName("Binds");							// If statement that handles setting up the binds that the component is going to use. 
	{																		// This cycles through all the elements with the named bind and finds the corresponding.
																			// binds by looking at the description of the bind. 
	if(bindGroup)
	{
		var bindList = bindGroup.getElementsByTagName("Bind");
		var i = bindList.length;
		while(i--)
		{
			var child = bindList.item(i);
			var description = String(child.getAttribute("Description"));

			if(description.equals("Alarm State Bind"))
			{
				alarmBind = child;
			}			
			if(description.equals("Value Bind"))
			{
				valueBind = child;
			}
		}
	}
	else
	{
		alert("ERROR: The BindGroup has been removed from this component.");			// Alerts the user if there isnt a bind group. 
	}
}

function onChange(evt)
{
	if(evt.getTarget().getFullBindName() == alarmBind.getFullBindName())				// If statement that executes when there is a change of the value that was assigned to the alarmbind. 
	{	
		var alarmStateNum = parseInt(evt.getValue());									// Gets the value of the bind and then sets it to a variable. 
			
		switch(alarmStateNum)															// This variable is then used in a switch statement that will set variables to different values
		{																				// and these variables will be used in other functions. 
			case 0:																		
			{
				alarmStatus = false;
				alarmAcknowledgementStatus = true;
				correctAlarmBinding = true;
				break;
			}
			
			case 1:
			{
				alarmStatus = true;
				alarmAcknowledgementStatus = false;
				correctAlarmBinding = true;
				break;
			}

			case 2:
			{
				alarmStatus = true;
				alarmAcknowledgementStatus = true;
				correctAlarmBinding = true;
				break;
			}
			
			case 3:
			{	
				alarmStatus = false;
				alarmAcknowledgementStatus = false;
				correctAlarmBinding = true;
				break;
			}
	
			case 4:
			{
				alarmStatus = false;
				alarmAcknowledgementStatus = true;
				correctAlarmBinding = true;
				break;
			}
			default:
			{
				alert("Alarm Not Bound To Alarm State.\nBind name: \"" + evt.getTarget().getFullBindName() + "\"");
				alarmStatus = false;																					// This is default if alarmStateNum is not bound. 
				alarmAcknowledgementStatus = true;
				correctAlarmBinding = false;
			}
		}
	}	


	if(evt.getTarget().getFullBindName() == valueBind.getFullBindName())					// Gets value that was assigned to the value bind and setting the variable Value to it. 
	{
		value = evt.getValue();
		var status = parseInt(evt.getStatus());
		forcedStatus = status == 3;
	}
	
	
	var outline = comp.getChildByName("background");										
	
	comp.getChildByName("Text").setAttribute("Content", getDisplayText(parseFloat(value)));	// Sets the content of the text box to a value that is from the getDisplayText() function. 		
		
	if(alarmStatus)											// If statement that executes if alarmStatus is true and handles whether something is in alarm or not. 
	{
		outline.setAttribute("Stroke", alarmColor);
		outline.setAttribute("StrokeWidth", "3");		
	}		
	else
	{
		if (forcedStatus)									// If statement happens if alarmStatus is false and handles whether something is forced or not. 
		{
			outline.setAttribute("Stroke", forcedColor);
			outline.setAttribute("StrokeWidth", "2");
		}
		else
		{
			outline.setAttribute("Stroke", offColor);
			outline.setAttribute("StrokeWidth", "1");
		}
	}

	if(alarmAcknowledgementStatus)								// If statement that handles the animation based on whether alarmAcknowledgementStatus is true or not. 
	{
		setAttributeById(comp, "Animate", "Animation", "Stop", "AlmAck");
	}
	else
	{
		setAttributeById(comp, "Animate", "Animation", "Start", "AlmAck");
	}
	
	if(!correctAlarmBinding)										// If there is no correctAlarmBinding which means if there are no bind for the point to use it will execute this If statement. 
	{
		outline.setAttribute("Stroke", normalColor);
		outline.setAttribute("StrokeWidth", "1");
		
		setAttributeById(comp, "Animate", "Animation", "Stop", "AlmAck");
		
		comp.getChildByName("Text").setAttribute("Content", "Incorrect Alarm Bind");
	}
}

function setAttributeById(parent, elementName, attribute, value, id)			// Takes the id of an element along with the parent and changes an attribute. 
{
	var bindList = parent.getElementsByTagName(elementName);
	
	for(var i=0; i < bindList.length; i++)
	{		
		if (bindList.item(i).getAttribute("Id")==id)
		{
			
			bindList.item(i).setAttribute(attribute, value);
		}
		else
		{
		}
	}
}

function getDisplayText(value)										// Function that handles the display text and applies the units and formatting. 
{
	try
	{
		var str = "...";
		if(!isNaN(value) && value != Infinity)
		{
			str = new Number(value).toFixed(dec);
			str += " " + units;
		}
		return str;
	}
	catch(ex)
	{
		return "... " + units;
	}
}]]></Script>
    <Expose ExposedAttribute="Color" Name="Alarm Color"/>
    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
    <Expose ExposedAttribute="Units" Name="Units"/>
    <Group Name="Display">
        <Rectangle Fill="None" Height="20.0" Left="0.0"
            Name="background" RadiusX="5" RadiusY="5" Stroke="#004000"
            StrokeDashArray="0.0" StrokeWidth="1.0" Top="0.0" Width="100">
            <LinearGradient EndPoint="0,1">
                <GradientStop Color="#FEFEFE" Offset="0"/>
                <GradientStop Color="#DFE0E2" Offset="1.0"/>
            </LinearGradient>
            <Expose ExposedAttribute="Width" Name="Component Width"/>
        </Rectangle>
        <Rectangle Fill="#F0080E" Height="20"
            Name="Alarm Acknowledgement" RadiusX="5" RadiusY="5"
            Stroke="None" Visibility="Hidden" Width="100">
            <Animate Animation="Stop" Attribute="Visibility"
                Duration="2" From="Hidden" Id="AlmAck" To="Visible">
                <Expose ExposedAttribute="Duration" Name="Flash Speed"/>
            </Animate>
            <RadialGradient RadiusX="2" RadiusY="1">
                <GradientStop Color="#77F0080E" Offset="0"/>
                <GradientStop Color="#EEF0080E" Offset="1.0"/>
            </RadialGradient>
            <Expose ExposedAttribute="Width" Name="Component Width"/>
        </Rectangle>
        <TextBox Fill="None" FontFamily="Arial" FontSize="15.0"
            FontStyle="Normal" FontWeight="Normal" Height="20.0"
            HorizontalAlign="Center" Left="2.5" Name="Text"
            Stroke="#000000" TextDecoration="None" Top="0.0"
            VerticalAlign="Middle" Width="100"><![CDATA[...]]><Expose
                ExposedAttribute="Width" Name="Component Width"/>
        </TextBox>
    </Group>
    <Group Name="Binds">
        <Bind Description="Value Bind" Name="Value" PreventDefault="True">
            <Expose ExposedAttribute="Name" Name="Value Bind"/>
            <Expose ExposedAttribute="PreventDefault" Name="Prevent Default"/>
        </Bind>
        <Bind Description="Alarm State Bind" Name="Alarm State" PreventDefault="True">
            <Expose ExposedAttribute="Name" Name="Alarm State Bind"/>
            <Expose ExposedAttribute="PreventDefault" Name="Prevent Default"/>
        </Bind>
    </Group>
    <Expose ExposedAttribute="ContentWidth" Name="Component Width"/>
    <Expose ExposedAttribute="Width" Name="Component Width"/>
    <Metadata Name="Name" Value="Analog Value with Flashing Alarm Until Acknowledge"/>
    <Metadata Name="Description" Value=""/>
</Component>
