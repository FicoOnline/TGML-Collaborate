<?xml version="1.0"?>
<Component Clip="False" Color="#F0080E" ComponentCounter="5"
    ContentHeight="20" ContentWidth="120" Decimals="0" Fill="#FFD100"
    GridSize="10" Height="20.0" Left="37.0"
    Name="Multistate Point Analog Display" Stroke="#42B4E6" Top="263.0"
    Units="" Width="120.0">
    <Expose ExposedAttribute="Color" Name="Alarm Color"/>
    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
    <Expose ExposedAttribute="Stroke" Name="Database Color"/>
    <Rectangle Fill="None" Height="20.0" Left="0.0" Name="background"
        RadiusX="5" RadiusY="5" Stroke="#626469" StrokeDashArray="0.0"
        StrokeWidth="1.0" Top="0.0" Width="120">
        <LinearGradient EndPoint="0,1">
            <GradientStop Color="#FEFEFE" Offset="0"/>
            <GradientStop Color="#DFE0E2" Offset="1.0"/>
        </LinearGradient>
    </Rectangle>
    <TextBox Fill="None" FontFamily="Arial" FontSize="15.0"
        FontStyle="Normal" FontWeight="Normal" Height="20.0"
        HorizontalAlign="Center" Left="2.5" Name="Text" Stroke="#000000"
        TextDecoration="None" Top="0.0" VerticalAlign="Middle" Width="115"><![CDATA[...]]></TextBox>
    <Group Name="display">
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="120.0" Height="20.0" Left="10.0"
            Name="MultiPoint" State0="Auto" State1="Heat"
            State10="Free Cool" State11="Ice" State2="Warm Up"
            State3="Cooling" State4="Night Purge" State5="PreCool"
            State6="Off" State7="Test" State8="Emer Heat"
            State9="Fan Only" Top="30.0" Width="120.0">
            <Expose ExposedAttribute="State1" Name="State1"/>
            <Expose ExposedAttribute="State2" Name="State2"/>
            <Expose ExposedAttribute="State3" Name="State3"/>
            <Expose ExposedAttribute="State4" Name="State4"/>
            <Expose ExposedAttribute="State5" Name="State5"/>
        </Component>
    </Group>
    <Bind Attribute="" Color="#009530" Name="UnitMd">
        <Expose ExposedAttribute="Color" Name="On Color"/>
        <Expose ExposedAttribute="Name" Name="Bind Name"/>
        <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var comp;
var dec;
var units;
var offColor;
var onColor;
var f;											// Variables that are going to be used globally.
var d;
var a;
var node;
var StateText;

function onLoad(evt)
{
	comp=evt.getCurrentTarget().getParentNode();
	offColor=comp.getChildByName("background").getAttribute("Stroke");
	onColor=evt.getCurrentTarget().getAttribute("Color");
	f=comp.getAttribute("Fill");									// Sets up the on load stuff. And sets up the exposed attributes and their settings.
	d=comp.getAttribute("Stroke");
	a=comp.getAttribute("Color");
	dec = comp.getAttribute("Decimals");
	units = comp.getAttribute("Units");
	

	
}

function onChange(evt)
{
	var value = evt.getValue();
	var status = parseInt(evt.getStatus());
	var tempCol = "";
	var outline = comp.getChildByName("background");
	var realvalue =	parseInt(evt.getValue());											// Turns the value received from the controller to a variable. 
	var StatesList = comp.getChild("display").getElementsByTagName("Expose");			// Variable that holds the elements that have the Expose tag. 
	var StatesListLength  = StatesList.length ; 										// Variable that holds the length of the list. Holds an actual number. 
	var StatesListINTArray = []; 														// Array that is declared for the integers that are going to be checked into 
	var StateTextArray = [];
	var UnassignedAlert = true; 
	
	
	for(var i = 0, l = StatesListLength; i < l; i += 1) 
	
	{	
	var child = StatesList.item(i).getAttribute("Name");  // Gets the name of the items off the list of exposed attributes in the group display. 
	var res = child.replace("State", "");				// Takes the name and deletes "State" from it. Spacing does not affect anything with this. 
	var RealNumber = parseInt(res);						// Takes the string with the "State" deleted from it and then turns it data type into a number. 
	StatesListINTArray[i] = RealNumber; 				// Stores its number into an array that will be used later. 
	StateTextArray[i] = comp.getChildByName("MultiPoint").getAttribute(child); // Takes the child string taken off the list and sets up the actual values of the exposed attribute into an array. 			
	}	
	
	for(var i = 0, l = StatesListLength; i < l; i += 1) 
	
	{
		if (realvalue == StatesListINTArray[i])				// Checks to see if value received from the controller equals any of the values in the array that was created in the previous for loop. 
		{
			UnassignedAlert = false ; 						// Sets the variable that acts as a check to see if the controller returned a state that hasnt been assigned by the user. 
			comp.getChildByName("Text").setAttribute("Content",StateTextArray[i] ); 		// Sets text box to the value that is exposed in the component. 
		}
		
	}
		
		if (UnassignedAlert == true)						// If statement that outputs an alert if there is a state that hasn't been assigned. 
		{
		comp.getChildByName("Text").setAttribute("Content", "Unassigned" + " " + realvalue ); // Changes the text box to say " Unassigned # " and the number is the value that was returned but not given a state. 
		}
	
		
	if (status == 2){
		outline.setAttribute("Stroke", offColor);
		outline.setAttribute("StrokeWidth", "1");								// Handles the kind of bind. If status equals 2 then its a good bind. 
	}
	else{
		outline.setAttribute("Stroke", borderCol(status));						// Calls the borderCol function that will change the color based on the status of things. 
		outline.setAttribute("StrokeWidth", "2");
	}
	
}



function borderCol(status){
	if(status==3){
		return f																// Function that calls that references the status number and returns a color type that sets.
	}
	else{
		if(status==1){
			return d
		}
		else{
			return a
		}
	}
}

function getDisplayText(value){												// Function that gets the value that is being returned from the control and displays it. 
		try{		
			var str = "...";
			if(!isNaN(value) && value != Infinity){
				str = new Number(value).toFixed(dec);
				str += " " + units;
			}
			return str;
		}
		catch(ex){
			return "... " + units;
		}

}
	
function debug(str){
	alert(str);
	}
	// Commented/Edited by Jarred Nolasco Email : JarredNolasco@gmail.com
	// Last Updated June 19th, 2014
	
	
	]]></Script>
    </Bind>
    <Metadata Name="Name" Value="Multistate Point Analog Display"/>
    <Metadata Name="Description" Value=""/>
</Component>
