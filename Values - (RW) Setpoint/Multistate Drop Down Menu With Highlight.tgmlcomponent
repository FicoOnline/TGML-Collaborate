<?xml version="1.0"?>
<Component Clip="False" ContentHeight="20" ContentWidth="120"
    Height="20.0" Id="Test" Left="183.0"
    Name="Multistate Drop Down Menu With Highlight" Top="191.0" Width="120.0">
    <Component Clip="False" Color="#F0080E" ComponentCounter="5"
        ContentHeight="20" ContentWidth="120" Decimals="0"
        Fill="#FFD100" GridSize="10" Height="20.0" Left="0"
        Name="Drop Down Menu" Stroke="#42B4E6" Top="0" Units="" Width="120">
        <Script Name="OnClickBehavior" OnMouseClick="OnClick" OnMouseDown="MouseDown"><![CDATA[
		
			// ***Note*** The reason that the component has 2 components within it is because the Override Indicator was interfering 
			// with the dropdown menu creation and would create errors when clicked on. The way it is built right now does not bring up errors
			// and functions perfectly. 
		
		
  
var comp;			  // Declaring the variable comp globally so it can be used anywhere in the script.
var BindShortCut;
var BackgroundShortCut;
var MenuShortCut;
var OnClickHighlightShortCut; 		// Global Variables that are going to be used in some of the functions. 
var MultPointShortCut;
var StatesList;
var timeoutID;
var Obj1 = new Main;// Assigning a instance of the object I created to a variable. 
var runtime;
var browser
		
function OnClick (evt)
{

comp = evt.getTarget().getParentNode();
BackgroundShortCut = comp.getChildByName("BackgroundRectangle");
BindShortCut = comp.getElementsByTagName("Bind").item(0);
StatesList = comp.getChildByName("display").getElementsByTagName("Expose");	 // Shortcuts for various things within the component so referencing things will be easier and more readable. 
MenuShortCut = comp.getChildByName("MenuText");
OnClickHighlightShortCut = comp.getChildByName("OnClickHighlight");
MultPointShortCut = comp.getChildByName("MultiPoint");
runtime = Packages.java.lang.System.getProperty("java.runtime.name");



var btn = parseInt(evt.getButton());     // Variable that has the value returned by the button. Used to determine what kind of click it was (left,right,middle).
var yPos = +evt.getCurrentTargetY();	// Variable that has the Y position of the mouse when a click occurs. 


if ( btn == 0 && yPos < 21)							// If statement that is triggered when there is a right click done. 
{
	if ( BackgroundShortCut.getAttribute("Visibility") == "Hidden") // If statement that checks to see if the menu has been opened. 
	{
	OnClickHighlightShortCut.setAttribute("Top" , "0");
	Obj1.OpenMenu(evt);		// Function that opens up the background display of the drop down menu. 
	Obj1.StatesListCreation(evt); 	// Function that creates the list of the states. 
	}else if ( BackgroundShortCut.getAttribute("Visibility") == "Visible")
	{
			BackgroundShortCut.setAttribute("Height","0");			 
			BackgroundShortCut.setAttribute("Visibility","Hidden");	 
			MenuShortCut.setAttribute("Content", "");					  			// Closes the menu if the menu is visible , if the yPos is less than 20 and if the left mouse button is clicked. 
			MenuShortCut.setAttribute("Height", "0");					 
			OnClickHighlightShortCut.setAttribute("Visibility", "Hidden");	 
	}
		
}

if(btn == 0 && (BackgroundShortCut.getAttribute("Visibility") == "Visible")) // If statement that is triggered only if the background display is visible and if there is a left click. This selects which state is set. 
{
	var BindName= BindShortCut.getFullBindName(); 							  // Gets the bindname that is passed through to another function. 
	Obj1.PointSetter(yPos,evt,BindName);	
}

if (btn == 0 && (OnClickHighlightShortCut.getAttribute("Top") > 0))		// If statement that handles closing of the menu. 
{
timeoutID = setTimeout("CloseMenu()", 750);			// Time delay that closes the menu after .75 seconds. The Close menu function is below this. 
	
	CloseMenu = function () 
	{
	comp = evt.getTarget().getParentNode();
			
			BackgroundShortCut.setAttribute("Height","0");			 // Sets height of the background rectangle to zero. 
			BackgroundShortCut.setAttribute("Visibility","Hidden");	 // Hides the background rectangle. 
			MenuShortCut.setAttribute("Content", "");					 // Sets the content of the textbox that displays the sets in the dropdown menu to nothing basically deleting it. 
			MenuShortCut.setAttribute("Height", "0");					 // Sets the length of the textbox to zero. 
			OnClickHighlightShortCut.setAttribute("Visibility", "Hidden");	 // Hides the highlight box that appears when something from the menu is clicked on. 
	
	}
}
}

function MouseDown(evt)
{
// This needs to be here so you can see what button click is used. The getButton function is only on the MouseDown event. 
}


function Main()
{		

		this.OpenMenu = function(evt) 								// Function that opens up the drop down menu. 
		{
			comp = evt.getTarget().getParentNode();
			var StatesListLength  = StatesList.length; 
			var MenuLength = (StatesListLength*30) + 20;
			var MenuLengthStr = MenuLength.toString();
			BackgroundShortCut.setAttribute("Height",MenuLengthStr); // Sets the height of the background to the number of states times 30 plus 20.
			BackgroundShortCut.setAttribute("Visibility","Visible"); // Sets the background visible. 
			MenuShortCut.setAttribute("Height", MenuLengthStr);			 // Sets the length of the text box based on the number of states times 30 plus 20
		}
			
		this.StatesListCreation = function(evt,yPos)									// Function that creates a text list of the states from the Group Display.
			{
			    comp = evt.getTarget().getParentNode();
				
			var StatesListLength  = StatesList.length; 											// Variable that stores the amount of elements that have the tag "Expose" in the display group. 
			var StatesListINTArray = [];														// Array declared to store the integer values of the states that are going to be used. 
			var StateTextArray = [];															// Array declared to store the string values of the states such Overnight Mode.
			var ListText = "";																	// String that will hold all of the text that comes with the states. 
			MenuShortCut.setAttribute("Top", "30");												// Pushes down the textbox that will hold all the values 20 pixels. 
			
			for(var i = 0, l = StatesListLength; i < l; i += 1) 								// For loop that Stores the integer values from the states in one array and then stores string values into a different array. 
			{
				var child = StatesList.item(i).getAttribute("Name");
				var res = child.replace("State", "");
				var RealNumber = parseInt(res);	
				var NewArray = [];
				StatesListINTArray[i] = RealNumber;
				StateTextArray[i] = MultPointShortCut.getAttribute(child);			
			}
			
			for(var j = 0, l = StatesListLength; j < l; j += 1)									// For loop that gets all the string values of the states and then puts them on top of each other with line breaks and
			{																					// then holds the values. 
				ListText = ListText + (StateTextArray[j] + "\n\n" );
			
			}
			if (BackgroundShortCut.getAttribute("Visibility") == "Hidden") // Checks to see if the background visibility is hidden.  
			{
				MenuShortCut.setAttribute("Content", "");						// If the background is hidden then it sets the content to nothing. If its not hidden it will fall through. 
			}else
			{
				MenuShortCut.setAttribute("Content", ListText);					// If the background is not hidden then this sets the string that was just made to the textbox. 
			}	
			}
			
		this.PointSetter = function(yPos,evt,BindName)
			{
				comp = evt.getTarget().getParentNode();
			var StatesListLength  = StatesList.length; 												// Variable that stores the amount of elements that have the tag "Expose" in the display group. 
			var MenuLength = (StatesListLength*30) + 20;											// Variable that calculates the size of the menu based on the amount of states that are listed in the display group.
			var StatesListINTArray = [];															// Array declared to store the integer values of the states that are going to be used.
			
			for(var i = 0, l = StatesListLength; i < l; i += 1) 				// For loop that enters the integer values of the states into an array to be used later in the function. 
			{
				var child = StatesList.item(i).getAttribute("Name");
				var res = child.replace("State", "");
				var RealNumber = parseInt(res);	
				StatesListINTArray[i] = RealNumber;
				
			}
			
			
			for(var i=0;i<StatesListLength;i++)						// For loop that sets the bindname to the value that is selected by the user from an invisible that is lined up with the displayed text. 
			{														// This for loop also sets the position of the highlight box. 
			if(yPos > ((i)*30 +30) && yPos < ((i +1)*30)+30)
			{	
			
				setValue(BindName,StatesListINTArray[i]);			// Sets the selected state to the point. Basically what this does is whatever state the user clicks on is being set by this point. 
				var OnClickHighlightPos;
				if ( i <= 4 && (runtime == "IKVM.NET" ))										// The following if statements set the position of the highlight box if the component is being used 
				{																				// in either StruxureWare or Workstation. 
				//alert("IDE Loop 1 ");
				OnClickHighlightPos = (i+1)*30 + (i); 					
				OnClickHighlightShortCut.setAttribute("Top", OnClickHighlightPos);		
				OnClickHighlightShortCut.setAttribute("Visibility", "Visible");			
				}else if (i >= 5 && i <= 9 && (runtime == "IKVM.NET" ))
				{
				//alert("IDE Loop 2");
				OnClickHighlightPos = (i+1)*30 + (i + 2); 
				OnClickHighlightShortCut.setAttribute("Top", OnClickHighlightPos);
				OnClickHighlightShortCut.setAttribute("Visibility", "Visible");	
				
				}else if (i >=10 && (runtime == "IKVM.NET" ))
				{
				//alert("IDE Loop 3 ");
				OnClickHighlightPos = (i+1)*30 + (i + 5); 
				OnClickHighlightShortCut.setAttribute("Top", OnClickHighlightPos);
				OnClickHighlightShortCut.setAttribute("Visibility", "Visible");	
				
				}
				
				if ( ( i <= 3) && (runtime == "Java(TM) SE Runtime Environment" ))					// These if statements are used when the component is loaded into the a web browser.  
				{																					// They set the position of the highlight box.
				//alert("First Loop"); 
				OnClickHighlightPos = (i+1)*30 + (i -2 ); 					
				OnClickHighlightShortCut.setAttribute("Top", OnClickHighlightPos);
				OnClickHighlightShortCut.setAttribute("Visibility", "Visible");			
				}
				
				if ((i >= 4) && (i <= 9) && (runtime == "Java(TM) SE Runtime Environment" ))
				{
				//alert("Second Loop");
				OnClickHighlightPos = (i+1)*30 + (i - 6); 
				OnClickHighlightShortCut.setAttribute("Top", OnClickHighlightPos);
				OnClickHighlightShortCut.setAttribute("Visibility", "Visible");	
				
				}

				if ((i >=10) && (runtime == "Java(TM) SE Runtime Environment" ))
				{
				//alert("Third Loop"); 
				OnClickHighlightPos = (i+1)*30 - (i - 8); 
				OnClickHighlightShortCut.setAttribute("Top", OnClickHighlightPos);
				OnClickHighlightShortCut.setAttribute("Visibility", "Visible");	
				
				}
			}	
			}		
			}
}





]]></Script>
        <Expose ExposedAttribute="ContentWidth" Name="Content Width"/>
        <Expose ExposedAttribute="Width" Name="Content Width"/>
        <Expose ExposedAttribute="Color" Name="Alarm Color"/>
        <Expose ExposedAttribute="Fill" Name="Forced Color"/>
        <Expose ExposedAttribute="Stroke" Name="Database Color"/>
        <Rectangle Fill="#FFFFFF" Height="100" Left="3"
            Name="BackgroundRectangle" RadiusX="5" RadiusY="5"
            Stroke="#000000" Top="20" Visibility="Hidden" Width="115"/>
        <Rectangle Fill="None" Height="20.0" Left="0.0"
            Name="background" RadiusX="5" RadiusY="5" Stroke="#626469"
            StrokeDashArray="0.0" StrokeWidth="1.0" Top="0.0" Width="120">
            <LinearGradient EndPoint="0,1">
                <GradientStop Color="#FEFEFE" Offset="0"/>
                <GradientStop Color="#DFE0E2" Offset="1.0"/>
            </LinearGradient>
            <Expose ExposedAttribute="Width" Name="Content Width"/>
        </Rectangle>
        <Rectangle Fill="#C0C0C0" Height="20" Id="" Left="4"
            Name="OnClickHighlight" RadiusX="0" RadiusY="0"
            Stroke="#000000" StrokeWidth="0" Top="0" Visibility="Hidden" Width="110"/>
        <TextBox Fill="None" FontFamily="Arial" FontSize="15.0"
            FontStyle="Normal" FontWeight="Normal" Height="20.0"
            HorizontalAlign="Center" Left="-8" Name="Text"
            Stroke="#000000" TextDecoration="None" Top="0.0"
            VerticalAlign="Middle" Width="115"><![CDATA[...]]><Expose
                ExposedAttribute="Left" Name="Display Text Position"/>
        </TextBox>
        <Group Name="display">
            <Component Clip="False" ContentHeight="20.0"
                ContentWidth="120.0" Height="20.0" Left="10.0"
                Name="MultiPoint" State1="State 1" State10="State 10"
                State11="State 11 " State2="State 2" State3="State 3"
                State4="State 4" State5="State 5" State6="State 6"
                State7="State 7" State8="State 8" State9="State 9"
                Top="30.0" Width="120.0">
                <Expose ExposedAttribute="State1" Name="State1"/>
                <Expose ExposedAttribute="State2" Name="State2"/>
                <Expose ExposedAttribute="State3" Name="State3"/>
                <Expose ExposedAttribute="State4" Name="State4"/>
                <Expose ExposedAttribute="State5" Name="State5"/>
                <Expose ExposedAttribute="State6" Name="State6"/>
                <Expose ExposedAttribute="State7" Name="State7"/>
                <Expose ExposedAttribute="State8" Name="State8"/>
                <Expose ExposedAttribute="State9" Name="State9"/>
                <Expose ExposedAttribute="State10" Name="State10"/>
            </Component>
        </Group>
        <TextBox Fill="None" FontFamily="Arial" FontSize="15"
            FontStyle="Normal" FontWeight="Normal" Height="0"
            HorizontalAlign="Center" Name="MenuText" Stroke="#000000" Width="120"><![CDATA[0]]></TextBox>
        <Bind Attribute="" Color="#009530" Name="DefaultBindName" PreventDefault="True">
            <Expose ExposedAttribute="Color" Name="On Color"/>
            <Expose ExposedAttribute="Name" Name="Bind Name"/>
            <Script OnDocumentLoad="onLoad" OnMouseClick="" OnSignalChange="onChange"><![CDATA[
			
					
var comp;
var dec;
var units;
var offColor;
var onColor;
var f;											// Variables that are going to be used globally.
var d;
var a;
var node;
var StateText;
var aMain; 
var UniversalWidth;




function onLoad(evt)
{
	comp=evt.getTarget().getParentNode();
	offColor=comp.getChildByName("background").getAttribute("Stroke");
	onColor=evt.getTarget().getAttribute("Color");
	f=comp.getAttribute("Fill");									// Sets up the on load stuff. And sets up the exposed attributes and their settings.
	d=comp.getAttribute("Stroke");
	a=comp.getAttribute("Color");
	dec = comp.getAttribute("Decimals");
	units = comp.getAttribute("Units");
	UniversalWidth = comp.getAttribute("ContentWidth");
	comp.getChildByName("Text").setAttribute("Left", -8 );
	comp.getChildByName("OnClickHighlight").setAttribute("Width", UniversalWidth- 7 );
	comp.getChildByName("MenuText").setAttribute("Width", UniversalWidth );
	comp.getChildByName("Text").setAttribute("Width", UniversalWidth );
	comp.getChildByName("BackgroundRectangle").setAttribute("Width", UniversalWidth -5 );
	
}

function onChange(evt)
{
	var value = evt.getValue();
	var status = parseInt(evt.getStatus());
	var tempCol = "";
	var outline = comp.getChildByName("background");
	var realvalue =	parseInt(evt.getValue());											// Turns the value received from the controller to a variable. 
	var StatesList = comp.getChild("display").getElementsByTagName("Expose");			// Variable that holds the elements that have the Expose tag. 
	var StatesListLength  = StatesList.length ; 										// Variable that holds the length of the list. Holds an actual number. 
	var StatesListINTArray = []; 														// Array that is declared for the integers that are going to be checked into 
	var StateTextArray = [];
	var UnassignedAlert = true; 
	
	
	for(var i = 0, l = StatesListLength; i < l; i += 1) 
	
	{	
	var child = StatesList.item(i).getAttribute("Name");  // Gets the name of the items off the list of exposed attributes in the group display. 
	var res = child.replace("State", "");				// Takes the name and deletes "State" from it. Spacing does not affect anything with this. 
	var RealNumber = parseInt(res);						// Takes the string with the "State" deleted from it and then turns it data type into a number. 
	StatesListINTArray[i] = RealNumber; 				// Stores its number into an array that will be used later. 
	StateTextArray[i] = comp.getChildByName("MultiPoint").getAttribute(child); // Takes the child string taken off the list and sets up the actual values of the exposed attribute into an array. 			
	}	
	
	for(var i = 0, l = StatesListLength; i < l; i += 1) 
	
	{
		if (realvalue == StatesListINTArray[i])				// Checks to see if value received from the controller equals any of the values in the array that was created in the previous for loop. 
		{
			UnassignedAlert = false ; 						// Sets the variable that acts as a check to see if the controller returned a state that hasnt been assigned by the user. 
			comp.getChildByName("Text").setAttribute("Content",StateTextArray[i] ); 		// Sets text box to the value that is exposed in the component. 
		}
		
	}
		
		if (UnassignedAlert == true)						// If statement that outputs an alert if there is a state that hasn't been assigned. 
		{
		comp.getChildByName("Text").setAttribute("Content", "Unassigned" + " " + realvalue ); // Changes the text box to say " Unassigned # " and the number is the value that was returned but not given a state. 
		}
	
		
	if (status == 2){
		outline.setAttribute("Stroke", offColor);
		outline.setAttribute("StrokeWidth", "1");								// Handles the kind of bind. If status equals 2 then its a good bind. 
	}
	else{
		outline.setAttribute("Stroke", borderCol(status));						// Calls the borderCol function that will change the color based on the status of things. 
		outline.setAttribute("StrokeWidth", "2");
	}
	
}


function borderCol(status){
	if(status==3){
		return f																// Function that calls that references the status number and returns a color type that sets.
	}
	else{
		if(status==1){
			return d
		}
		else{
			return a
		}
	}
}

function getDisplayText(value){												// Function that gets the value that is being returned from the control and displays it. 
		try{		
			var str = "...";
			if(!isNaN(value) && value != Infinity){
				str = new Number(value).toFixed(dec);
				str += " " + units;
			}
			return str;
		}
		catch(ex){
			return "... " + units;
		}

}
	
function debug(str){
	alert(str);
	}
	
	

	
	 ]]></Script>
            <Expose ExposedAttribute="PreventDefault" Name="Prevent Default"/>
        </Bind>
    </Component>
    <Component Clip="False" ContentHeight="20" ContentWidth="15"
        Height="19.285535983181774" Left="105" Name="ActionIndication"
        Top="0.284520258199564" Visibility="Visible" Width="15.22063586152035">
        <Path Fill="#009530" Name="OvrBox"
            PathData="M0.0,0.0 C5.0,0.0 4.0,0.0 9.0,0.0 12.0,0.0 14.0,2.0 14.0,5.0 14.0,8.0 14.0,12.0 14.0,15.0 14.0,18.0 12.0,19.93 9.0,20.0 4.0,20.0 5.0,20.0 0.0,20.0 0.0,15.0 0.0,5.0 0.0,0.0"
            Stroke="#004000" StrokeDashArray="0.0" StrokeWidth="0"/>
        <Polygon Fill="#FFFFFF" Name="OvrArrow"
            Points="10.0,4.0 3.0,10.0 10.0,15.0" Stroke="None"
            StrokeDashArray="0.0" StrokeWidth="0"/>
        <Expose ExposedAttribute="Left" Name="OvrIndicator Position"/>
        <Script OnDocumentLoad="OnLoad"><![CDATA[


function OnLoad(evt)
{

var comp  = evt.getTarget().getParentNode();

var Width= comp.getChildByName("BackgroundRectangle").getAttribute("Width");
var Position = parseInt(Width);
comp.getChildByName("ActionIndication").setAttribute("Left" , Position  - 10 ); // Sets the Position of the Override indicator. 

}
// Commented/Edited by Jarred Nolasco Email : JarredNolasco@gmail.com
// Last Updated July 23rd, 2014

]]></Script>
    </Component>
    <Metadata Name="Name" Value="Multistate Drop Down Menu With Highlight"/>
    <Metadata Name="Description" Value=""/>
</Component>
