<?xml version="1.0"?>
<Component ContentHeight="20" ContentWidth="100" Description=""
    Fill="#FFD100" GridSize="10" Height="20.0" Left="265.0"
    Name="Digital Override" OffText="Disable" OnText="Enable"
    OnValue="1,100,on,true,enable,enabled" Top="168.0" Width="100.0">
    <Expose ExposedAttribute="OnValue" Name="On Value"/>
    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
    <Rectangle Fill="None" Height="20.0" Left="0" Name="background"
        RadiusX="5" RadiusY="5" Stroke="#626469" StrokeDashArray="0.0"
        StrokeWidth="1.0" Top="0" Width="100">
        <LinearGradient EndPoint="0,1">
            <GradientStop Color="#FEFEFE" Offset="0"/>
            <GradientStop Color="#DFE0E2" Offset="1.0"/>
        </LinearGradient>
        <Expose ExposedAttribute="Stroke" Name="Normal Color"/>
        <Expose ExposedAttribute="Width" Name="Component Width"/>
    </Rectangle>
    <Bind Attribute="" Color="#009530" Name="Spt" PreventDefault="False">
        <Expose ExposedAttribute="Color" Name="On Color"/>
        <Expose ExposedAttribute="Name" Name="Bind Name"/>
        <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[
var offColor;
var comp;
var onColor;									
var onText;
var offText;
var onValue;									// Variables that are declared globally so they can be used in all the functions 
var rtnArray = new Array();
var f;
var d;
var a;

function onLoad(evt)
{
	comp=evt.getCurrentTarget().getParentNode();
	offColor=comp.getChildByName("background").getAttribute("Stroke");
	onColor=evt.getCurrentTarget().getAttribute("Color");
	onText=comp.getAttribute("OnText");							// Short cuts that are made to improve readability and to cut down on typing. 
	offText=comp.getAttribute("OffText");						// These short cuts are going to be used in the rest of the component.
	offValue=comp.getAttribute("OffValue");
	onValue=buildArray(comp.getAttribute("OnValue").split(','));
	f=comp.getAttribute("Fill");
	d=comp.getAttribute("Stroke");
	a=comp.getAttribute("Color");
}

function onChange(evt)											// Function that handles what happens when one of bind values changes. 
{
	var value = evt.getValue();
	var status = parseInt(evt.getStatus());
	var tempCol = "";
	var outline = comp.getChildByName("background");
	if (isNumber(value)) value = Math.round(value);
	
	if (Bool(value)){													// If Statemenet that takes the value that was givent to the binding and decides whether its 
																		// on or off. 														
		comp.getChildByName("Text").setAttribute("Content", onText);
		tempCol = onColor;
	}
	else{
		comp.getChildByName("Text").setAttribute("Content", offText);
		tempCol = offColor;
	}
	
	
	if (status == 2){												
		outline.setAttribute("Stroke", tempCol);						// If the status is a normal then it will be set the border color to whatever tempCol is. 
		outline.setAttribute("StrokeWidth", "1");
	}
	else{
		outline.setAttribute("Stroke", borderCol(status));				// Calls the borderCol(); function to see what color it is. 
		outline.setAttribute("StrokeWidth", "2");
	}
	
}

function borderCol(status){					// Function that sets the border color based off of the status. 
	if(status==3){							// If the status is forced then the forced color will be the color of the border. 
		return f
	}
	else{
		if(status==1){
			return d
		}
		else{
			return a
		}
	}
}

function Bool(val){									//Function that checks the string value to the the on value array.
	for (var i=0;i<onValue.length;i++){
		if(String(val).toLowerCase() == String(onValue[i]).toLowerCase())
		{
			return true;
		}
	}
	return false;
}

function buildArray(Array){								// Function that builds array when to store the "on" values that are used. 
	for (var i=0;i<Array.length;i++){
		if (Array[i].substring(0,1) == " "){
			Array[i] = Array[i].substring(1, Array[i].length);
		}
		if (isNumber(Array[i]) || Array[i]=="true" || Array[i]=="false" ){
			rtnArray[i] = Array[i]
		}
		else{
			rtnArray[i] = "'" + Array[i] + "'";
		}
	}
	return rtnArray;
}
	
function isNumber (o) {					// Function that checks to see if something is a number. 
  return ! isNaN (o-0) && o != null;
}]]></Script>
        <Expose ExposedAttribute="PreventDefault" Name="Prevent Default"/>
    </Bind>
    <Expose ExposedAttribute="OnText" Name="On Text"/>
    <Expose ExposedAttribute="OffText" Name="Off Text"/>
    <TextBox Fill="None" FontFamily="Arial" FontSize="15.0"
        FontStyle="Normal" FontWeight="Normal" Height="20.0"
        HorizontalAlign="Center" Left="-5" Name="Text" Stroke="#000000"
        TextDecoration="None" Top="0" VerticalAlign="Middle"
            Width="100"><![CDATA[...]]><Expose ExposedAttribute="Width" Name="Component Width"/>
    </TextBox>
    <Component Clip="False" ContentHeight="20.0" ContentWidth="15"
        Height="20.0" Left="85" Name="OvrArrow" Top="0" Width="15.0">
        <Path Fill="#009530" Name="Box"
            PathData="M0.0,0.0 C5.0,0.0 5,0 10,0 12,0 15,2 15,5 15,10 15,15 15,15 15,18 12,20 9,20 4,20 5.0,20.0 0.0,20.0 0.0,15.0 0.0,5.0 0.0,0.0"
            Stroke="#004000" StrokeDashArray="0.0" StrokeWidth="1.0"/>
        <Polygon Fill="#FFFFFF" Name="Arrow"
            Points="9.83830081246947,3.812333812258316 2.670400857925415,9.837342605211944 9.83830081246947,15.862351398165572"
            Stroke="None" StrokeDashArray="0.0" StrokeWidth="0"/>
        <Expose ExposedAttribute="Left" Name="Override Notification Position"/>
    </Component>
    <Expose ExposedAttribute="Width" Name="Component Width"/>
    <Expose ExposedAttribute="ContentWidth" Name="Component Width"/>
    <Metadata Name="Name" Value="Digital Override"/>
    <Metadata Name="Description" Value=""/>
</Component>
